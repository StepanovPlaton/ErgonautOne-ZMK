#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        Symbols {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
            layers = <0>;
        };

        LBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <9 10>;
        };

        RBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 22>;
        };

        SQuote {
            bindings = <&kp SQT>;
            key-positions = <33 34>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <4 5>;
        };

        LeftClick {
            bindings = <&mkp LCLK>;
            key-positions = <15 16>;
        };

        RightClick {
            bindings = <&mkp RCLK>;
            key-positions = <14 15>;
        };

        MiddleClick {
            bindings = <&mkp MCLK>;
            key-positions = <13 14>;
        };

        Mouse4 {
            bindings = <&mkp MB4>;
            key-positions = <14 16>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&none  &kp Q           &kp W           &kp E        &kp R             &kp T          &kp Y                 &kp U              &kp I                &kp O            &kp P                    &none
&none  &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G          &kp H                 &mt RIGHT_SHIFT J  &mt RCTRL K          &mt RIGHT_ALT L  &mt RIGHT_WIN SEMICOLON  &none
&none  &kp Z           &kp X           &kp C        &kp V             &kp B          &kp N                 &kp M              &kp COMMA            &kp DOT          &kp SLASH                &none
                                       &mkp LCLK    &lt 1 SPACE       &mt LCTRL TAB  &mt LEFT_SHIFT ENTER  &lt 2 BACKSPACE    &mt LEFT_WIN DELETE
            >;
        };

        Tools {
            bindings = <
&none  &none  &none  &kp C_NEXT        &kp C_VOLUME_UP    &kp KP_NUMLOCK  &kp INSERT  &kp PRINTSCREEN  &kp LC(C)  &kp LC(V)  &kp LC(Z)  &none
&none  &none  &none  &kp C_PLAY_PAUSE  &kp C_MUTE         &kp CAPSLOCK    &kp LEFT    &kp DOWN         &kp UP     &kp RIGHT  &none      &none
&none  &none  &none  &kp C_PREV        &kp C_VOLUME_DOWN  &kp SCROLLLOCK  &kp HOME    &kp PG_DN        &kp PG_UP  &kp END    &none      &none
                     &trans            &trans             &trans          &none       &trans           &trans
            >;
        };

        Num {
            bindings = <
&none  &kp LEFT_BRACE        &kp N7  &kp N8  &kp N9  &kp RIGHT_BRACE        &kp CARET        &kp AMPERSAND     &kp PIPE   &kp PERCENT  &kp DOLLAR    &none
&none  &kp LEFT_PARENTHESIS  &kp N4  &kp N5  &kp N6  &kp RIGHT_PARENTHESIS  &kp EXCLAMATION  &kp SINGLE_QUOTE  &kp EQUAL  &kp MINUS    &kp ASTERISK  &none
&none  &kp LEFT_BRACKET      &kp N1  &kp N2  &kp N3  &kp RIGHT_BRACKET      &kp QUESTION     &kp GRAVE         &none      &kp HASH     &kp AT_SIGN   &none
                                     &kp N0  &trans  &none                  &trans           &trans            &trans
            >;
        };

        Func {
            bindings = <
&none  &none  &kp F7  &kp F8  &kp F10  &bootloader  &bootloader  &none   &none   &none  &bt BT_SEL 0  &none
&none  &none  &kp F4  &kp F5  &kp F6   &kp F12      &sys_reset   &none   &none   &none  &bt BT_SEL 1  &none
&none  &none  &kp F1  &kp F2  &kp F3   &kp F11      &none        &none   &none   &none  &bt BT_CLR    &none
                      &trans  &trans   &trans       &trans       &trans  &trans
            >;
        };
    };
};
